package ch.pschatzmann.news;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;

import org.glassfish.jersey.client.ClientConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.pschatzmann.news.utils.Throttle;
import ch.pschatzmann.news.utils.Utils;

/**
 * Loads the Gaurdian documents from https://content.guardianapis.com/search
 * 
 * @author pschatzmann
 *
 */
public class HistoryDataGuardian implements IData {
	private static Logger log = LoggerFactory.getLogger(HistoryDataGuardian.class);
	private IDocumentStore store;
	private String source = "guardian";
	private String section = "business";
	private String apiKey = "10aaee97-5a18-4e57-b6e3-923e27f03041";
	private DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	private Throttle throttle = new Throttle(100);  // 10 calls per 1000 ms 
	private int startYear = 2000;
	private boolean force = false;
	private static boolean isActive = false;

	/**
	 * Minimum Constructor
	 * 
	 * @param store
	 */
	public HistoryDataGuardian(IDocumentStore store) {
		this.store = store;
	}

	/**
	 * Constructor with all parameters
	 * 
	 * @param store
	 * @param startYear
	 * @param apiKey
	 * @param section
	 */
	public HistoryDataGuardian(IDocumentStore store, String startYear, String apiKey, String section) {
		this.store = store;
		this.startYear = Integer.parseInt(startYear);
		this.apiKey = apiKey;
		this.section = section;
	}

	/**
	 * Saves all (new) data from the New York times
	 */
	@Override
	public synchronized void save() {
		log.info("save");
		if (!isActive) {
			isActive = true;
			try {
				getPeriods().stream().filter(period -> !exists(period)).map(period -> getData(period))
						.forEach(line -> line.forEach(l -> store.add(l)));
			} finally {
				isActive = false;
			}
		} else {
			log.info("Nothing done because saving is still in process");
		}
	}

	/**
	 * Used to filter out the periods which have already been processed
	 * 
	 * @param period
	 * @return
	 */
	protected boolean exists(String year) {
		boolean result = (force == true) ? false : store.contains(getCriteria(year));
		log.info("exists {} -> {}", year, result);
		return result;
	}

	/**
	 * Saves the data for the indicated year
	 * 
	 * @param year
	 * @param month
	 */
	public void save(String year) {
		getData(year).forEach(headline -> store.add(headline));
	}

	/**
	 * Check in search engine if we already have any data for the indicated period
	 * 
	 * @param year
	 * @param month
	 * @return
	 */

	protected Map<String, String> getCriteria(String year) {
		final Map<String, String> queryParamMap = new HashMap<String, String>();
		queryParamMap.put("q", "publisher_t:" + Utils.quote(source) + " AND publishDate_t:" + Utils.quote(year));
		return queryParamMap;
	}

	/**
	 * Execute REST call to
	 * https://content.guardianapis.com/search?section=business&from-date=1970-01-01&to-date=2000-12-31&page-size=100&api-key=10aaee97-5a18-4e57-b6e3-923e27f03041
	 * 
	 * @param period
	 * @return
	 */
	protected Stream<Document> getData(String year) {
		Stream<Document> result = Stream.empty();
		ClientConfig config = new ClientConfig();

		Client client = ClientBuilder.newClient(config);
		String fromDate = getFromDate(year);
		int pages = 0;
		int page = 1;
		while (true) {
			log.info("collecting page {} of {}", page, pages);
			throttle.throttle();
			WebTarget target = client.target("https://content.guardianapis.com/search");
			JsonObject response = target.queryParam("section", section).queryParam("api-key", apiKey)
					.queryParam("from-date", fromDate).queryParam("to-date", year + "-12-31")
					.queryParam("page-size", "200").queryParam("page", "" + page)
					.queryParam("show-references", "reuters-stock-ric").request().accept(MediaType.APPLICATION_JSON)
					.get(JsonObject.class);

			JsonObject responseJson = response.getJsonObject("response");
			if (responseJson != null) {
				Stream<Document> currentStream = Stream.empty();
				JsonArray array = responseJson.getJsonArray("results");
				if (array != null) {
					currentStream = array.getValuesAs(JsonObject.class).stream()
							.map(m -> new Document(null, source, date(m), txt(m), author(m), link(m), keys(m)));
					result = Stream.concat(result, currentStream);
				}
				page++;
				pages = responseJson.getInt("pages");
				if (page > pages) {
					break;
				}
			} else {
				break;
			}
		}
		return result;
	}

	/**
	 * For the current year we search the last document date
	 * 
	 * @param year
	 * @return
	 */
	protected String getFromDate(String year) {
		String result = year + "-01-01";
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		if (Integer.valueOf(year) == currentYear) {
			Map search = new HashMap();
			search.put("sort", "publishDate_t desc");
			search.put("q", "publisher_t:\"" + source + "\"");
			List<Document> list = this.store.list(search, 1);
			if (list.isEmpty()) {
				result = list.get(0).getPublishDate_t().substring(0, 10);
			}
		}
		return result;
	}

	/**
	 * Determines the (heading) text
	 * 
	 * @param m
	 * @return
	 */
	protected String txt(JsonObject m) {
		String result = m.getString("webTitle", null);
		int pos = result.indexOf("|");
		if (pos > 0) {
			result = result.substring(0, pos - 1);
		}
		return result;
	}

	protected String link(JsonObject m) {
		String result = m.getString("webUrl");
		if (result == null) {
			result = "";
		}
		return result;
	}

	/**
	 * Determines the author
	 * 
	 * @param m
	 * @return
	 */
	protected String author(JsonObject m) {
		String result = m.getString("webTitle", null);
		int pos = result.indexOf("|");
		if (pos > 0) {
			result = result.substring(pos + 1);
		} else {
			result = "";
		}
		return result;
	}

	/**
	 * Returns the date from the NYT result
	 * 
	 * @param rec
	 * @return
	 */
	protected Date date(JsonObject rec) {
		try {
			String dateStr = rec.getString("webPublicationDate");
			dateStr = dateStr.replaceAll("T", " ");
			dateStr = dateStr.replaceAll("Z", "");
			return df.parse(dateStr);
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	/**
	 * Returns the list of topics from the NYT result
	 * 
	 * @param rec
	 * @return
	 */
	protected List<String> keys(JsonObject rec) {
		List<String> result = Collections.emptyList();
		JsonArray a = rec.getJsonArray("references");
		if (a != null) {
			result = a.stream().map(jv -> jv.asJsonObject().getString("id").replaceAll("reuters-stock-ric/", ""))
					.collect(Collectors.toList());
		}
		return result;
	}

	/**
	 * Create list of year/month objects since the year 2000
	 * 
	 * @return
	 */
	protected List<String> getPeriods() {
		List<String> result = new ArrayList<String>();
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		for (int j = startYear; j <= currentYear; j++) {
			result.add(String.valueOf(j));
		}
		Collections.reverse(result);
		return result;
	}
}
