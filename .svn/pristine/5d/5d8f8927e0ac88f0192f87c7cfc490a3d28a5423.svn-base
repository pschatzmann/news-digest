package ch.pschatzmann.news;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;

import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.logging.LoggingFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.pschatzmann.news.processing.FixedRateTimer;
import ch.pschatzmann.news.processing.RestPagedQuery;
import ch.pschatzmann.news.processing.Throttle;

/**
 * Loads the headlines form the New York Times with the help of the archive API
 * into Solr
 * 
 * @author pschatzmann
 *
 */

public class HistoryDataNYT implements IData {
	private static Logger log = LoggerFactory.getLogger(HistoryDataNYT.class);
	private IDocumentStore store;
	private String source = "nytimes";
	private String apiKey = Utils.property("nytAPIKey","519c8dbe6aa64290922b802f241f94f0");
	private DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	private Throttle throttle = new Throttle(1000);
	private int startYear = Integer.parseInt(Utils.property("startYear","2000"));
	private boolean force = false;
	private static boolean isActive = false;

	/**
	 * Minimum Constructor
	 * 
	 * @param store
	 */

	public HistoryDataNYT(IDocumentStore store) {
		this.store = store;
	}

	/**
	 * Constructor
	 * 
	 * @param store
	 * @param startYear
	 * @param apiKey
	 */
	public HistoryDataNYT(IDocumentStore store, String startYear, String apiKey) {
		this(store, Integer.parseInt(startYear), apiKey);
	}

	/**
	 * Constructor
	 * 
	 * @param store
	 */
	public HistoryDataNYT(IDocumentStore store, int startYear, String apiKey) {
		this.store = store;
		this.startYear = startYear;
		if (apiKey!=null) {
			this.apiKey = apiKey;		
		}
	}

	/**
	 * Saves all data from the New York times
	 */
	@Override
	public synchronized void save() {
		log.info("save");
		if (!isActive) {
			isActive = true;
			try {
				getPeriods()
					.stream()
					.filter(period -> !exists(period))
					.map(period -> getData(period))
					.forEach(line -> line.forEach(l -> store.add(l)));
			} finally {
				isActive = false;
			}
		} else {
			log.info("Nothing done because saving is still in process");
		}
	}

	/**
	 * Used to filter out the periods which have already been processed
	 * 
	 * @param period
	 * @return
	 */
	protected boolean exists(YearMonth period) {
		boolean result = (force == true) ? false : store.contains(getCriteria(period.year, period.month));
		log.info("exists {} -> {}", period, result);
		return result;
	}

	/**
	 * Checks if the period has already been loaded
	 * 
	 * @param year
	 * @param month
	 * @return
	 */
	public boolean exists(int year, int month) {
		YearMonth period = new YearMonth(year, month);
		return exists(period);
	}

	/**
	 * Saves the data for the indiexted year and month
	 * 
	 * @param year
	 * @param month
	 */
	public void save(int year, int month) {
		getData(new YearMonth(year, month)).forEach(headline -> store.add(headline));
	}

	/**
	 * Check in search engine if we already have any data for the indicated period
	 * 
	 * @param year
	 * @param month
	 * @return
	 */

	protected Map<String, String> getCriteria(int year, int month) {
		final Map<String, String> queryParamMap = new HashMap<String, String>();
		queryParamMap.put("q", "publisher_t:" + Utils.quote(source) + " AND publishDate_t:"
				+ Utils.quote(year + "-" + String.format("%02d", month)));
		return queryParamMap;
	}

	/**
	 * Execute REST call to https://api.nytimes.com/svc/archive/v1/
	 * 
	 * @param period
	 * @return
	 */
	protected Stream<Document> getData(YearMonth period) {
		Stream<Document> result = Stream.empty();
		ClientConfig config = new ClientConfig();
		//config.property(LoggingFeature.LOGGING_FEATURE_VERBOSITY_CLIENT, LoggingFeature.Verbosity.PAYLOAD_ANY);
		//config.property(LoggingFeature.LOGGING_FEATURE_LOGGER_LEVEL_CLIENT, "INFO");

		Client client = ClientBuilder.newClient(config);

		throttle.throttle();
		WebTarget target = client.target("http://api.nytimes.com/svc/archive/v1/")
				.path("" + period.year + "/" + period.month + ".json")
				.queryParam("api-key", apiKey);
		
		result = new RestPagedQuery(target, "response", "docs", "", "")
				.stream()
				.map(m -> new Document(m.getString("_id"), source, date(m), txt(m), author(m), link(m), keys(m)));
		
		return result;
	}

	/**
	 * Determines the (heading) text
	 * 
	 * @param m
	 * @return
	 */
	protected String txt(JsonObject m) {
		String result = null;
		result = m.getString("lead_paragraph", null);
		if (result == null) {
			result = m.getString("snippet", null);
			if (result == null) {
				result = m.getString("abstract", null);
			}
		}
		return result;
	}

	protected String link(JsonObject m) {
		String result = m.getString("web_url");
		if (result == null) {
			result = "";
		}
		return result;
	}

	/**
	 * Determines the author
	 * 
	 * @param m
	 * @return
	 */
	protected String author(JsonObject m) {
		String result = "";
		try {
			Object v = m.get("byline");
			if (v instanceof JsonObject) {
				JsonObject jv = m.getJsonObject("byline");
				if (jv != null) {
					result = jv.getString("original","");
				}
			}
		} catch (Exception ex) {
			log.error(ex.getMessage(), ex);
			log.error(m.toString());
		}
		return result;
	}

	/**
	 * Returns the date from the NYT result
	 * 
	 * @param rec
	 * @return
	 */
	protected Date date(JsonObject rec) {
		try {
			String dateStr = rec.getString("pub_date");
			dateStr = dateStr.replaceAll("T", " ");
			dateStr = dateStr.replaceAll("Z", "");
			return df.parse(dateStr);
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	/**
	 * Returns the list of topics from the NYT result
	 * 
	 * @param rec
	 * @return
	 */
	protected List<String> keys(JsonObject rec) {
		JsonArray a = rec.getJsonArray("keywords");
		List<String> result = a.stream().map(jv -> jv.asJsonObject().getString("value")).collect(Collectors.toList());
		return result;
	}

	/**
	 * Create list of year/month objects since the year 2000
	 * 
	 * @return
	 */
	protected List<YearMonth> getPeriods() {
		List<YearMonth> result = new ArrayList<YearMonth>();
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		for (int j = startYear; j <= currentYear; j++) {
			for (int i = 1; i <= 12; i++) {
				result.add(new YearMonth(j, i));
			}
		}
		Collections.reverse(result);
		return result;
	}

	/**
	 * Object with year and month
	 * 
	 * @author pschatzmann
	 *
	 */
	protected class YearMonth {
		int year;
		int month;

		YearMonth(int year, int month) {
			this.year = year;
			this.month = month;
		}

		public String toString() {
			return "" + year + "-" + month;
		}
	}

	/**
	 * Returns if we process periods even if they exist in the database
	 * 
	 * @return
	 */
	public boolean isForce() {
		return force;
	}

	/**
	 * Defines if we process periods even if they exist in the database
	 * 
	 * @param force
	 */

	public void setForce(boolean force) {
		this.force = force;
	}

	/**
	 * Schedules to download and save the data at the indicated intervalls
	 */
	@Override
	public void scheduleSave(long scheduleMs) {
		FixedRateTimer.schedule(() -> this.save(), scheduleMs);
	}

}
